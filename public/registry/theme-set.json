{
  "name": "theme-set",
  "type": "registry:ui",
  "description": "A collection of theme-related components including ThemeProvider, ThemeDropdown, and ThemeToggle",
  "dependencies": ["next-themes", "lucide-react"],
  "registryDependencies": ["dropdown-menu", "button"],
  "files": [
    {
      "path": "ra3-ui/theme-provider.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { ThemeProvider as NextThemesProvider } from 'next-themes'\n\nexport function ThemeProvider({\n  children,\n  ...props\n}: React.ComponentProps<typeof NextThemesProvider>) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n",
      "type": "registry:ui",
      "target": "components/ra3-ui/theme-provider.tsx"
    },
    {
      "path": "ra3-ui/theme-dropdown.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { Moon, Sun } from 'lucide-react'\nimport { useTheme } from 'next-themes'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n\nexport function ThemeDropdown() {\n  const { setTheme } = useTheme()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme('light')}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme('dark')}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme('system')}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ra3-ui/theme-dropdown.tsx"
    },
    {
      "path": "ra3-ui/theme-toggle.tsx",
      "content": "'use client'\n\nimport { MoonIcon } from 'lucide-react'\n\nimport { useState } from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { SunIcon } from 'lucide-react'\nimport { useTheme } from 'next-themes'\nimport { useEffect } from 'react'\n\n// Simple toggle button for theme switching\nexport function ThemeToggle({\n  className,\n  children,\n}: {\n  className?: string\n  children?: (props: {\n    theme: string | undefined\n    mounted: boolean\n  }) => React.ReactNode\n}) {\n  const { theme, setTheme } = useTheme()\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  const toggleTheme = () => {\n    setTheme(theme === 'dark' ? 'light' : 'dark')\n  }\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className={cn(\n        'text-foreground/80 hover:bg-muted rounded-full p-2 transition-colors',\n        className\n      )}\n    >\n      {children ? (\n        children({ theme, mounted })\n      ) : mounted && theme === 'dark' ? (\n        <SunIcon />\n      ) : (\n        <MoonIcon />\n      )}\n    </button>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ra3-ui/theme-toggle.tsx"
    }
  ]
}
